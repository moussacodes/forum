generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @unique @default(cuid())
  username         String    @unique
  email            String    @unique
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @default(now()) @updatedAt
  verified         Boolean?  @default(false)
  muted            Boolean?  @default(false)
  hashedPassword   String?
  refreshToken     String?
  lastLogin        DateTime  @default(now())
  pfp              String?
  bio              String?
  socialLinks      String[]  @default([])
  likedThreads     String[]  @default([])
  dislikedThreads  String[]  @default([])
  likedComments    String[]  @default([])
  dislikedComments String[]  @default([])
  role             Role      @relation(fields: [roleId], references: [id])
  badge            Badge?    @relation(fields: [badgeId], references: [id])
  roleId           String
  badgeId          String
  Thread           Thread[]
  Comment          Comment[]
  score            Int?
  active           Boolean
}

model Thread {
  id            String    @id @unique @default(cuid())
  title         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  content       String
  tags          String[]
  reactionCount Int       @default(0)
  modified      Boolean   @default(false)
  userId        String
  views         Int       @default(0)
  featured      Boolean   @default(false)
  statues       String    @default("open")
  coments       Comment[]
  author        User      @relation(fields: [userId], references: [id])
}

model Comment {
  id            String   @id @unique @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  modified      Boolean  @default(false)
  userId        String
  reactionCount Int      @default(0)
  threadId      String
  thread        Thread   @relation(fields: [threadId], references: [id])
  author        User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String   @id @unique @default(cuid())
  name        UserRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  UserProfile User[]
}

enum UserRole {
  ADMIN
  MODERATOR
  CONTRIBUTOR
  REGULAR_USER
  NEW_USER
  BANNED_USER
  BOT
  COMMUNITY_AMBASSADOR
  MUTED_USER
}

model Badge {
  id          String    @id @unique @default(cuid())
  name        UserBadge
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  UserProfile User[]
}

enum UserBadge {
  STARTER
  ACTIVE_POSTER
  HELPER
  DAILY_CONTRIBUTOR
  ENGAGER
  VERSATILE_POSTER
  EVENT_ORGANIZER
  BADGE_COLLECTOR
  THREAD_CHAMPION
  FEATURED_THREAD_
}
